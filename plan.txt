
########### постройка образа в папке с Докерфайлом:
docker build . -t php:7.4-apache-xdebug
docker build . -t php:8.0-apache-xdebug

создание проекта:
docker run -d -p  80:80 -v "$PWD":/var/www  -w="/var/www"   php:8.0-apache-xdebug  composer create-project symfony/website-skeleton название папки для проекта
docker run -d -p 80:80 -v "$PWD":/var/www  -w="/var/www"   php:7.4-apache-xdebug  composer create-project symfony/website-skeleton название папки для ПРОЕКТА

######## запуск проекта в папке проекта:
docker run -d -p 80:80 -v "$PWD":/var/www --name oo  php:7.4-apache-xdebug
docker run -d -p 80:80 -v "$PWD":/var/www --name oo  php:8.0-apache-xdebug
docker exec -it oo /bin/bash

########### переименование public в html:
cd symp \
sudo mv public html

и в composer.json проверить, чтобы было html:
 "extra": {
        "symfony": {
            "allow-contrib": true,   //true, чтобы апач-пак поставить
            "require": "5.2.*"
        },
        "public-dir": "html"
    }

перед установкой - вернуть папку public, т.к. установщик туда кинет htaccess, потом его нужно перекинуть в html папку
composer req symfony/apache-pack



######### удаление образов, контейнеров:
docker rmi -f $(docker images -a -q) - удаление всех образов
docker rm $(docker ps -a -q)

docker rmi $(docker images -f dangling=true -q)
docker image prune -a

docker rmi -f $(docker images --filter dangling=true -q) - - очистка образов кеша слоев -т.е. недействительных образов


########### makers
composer req --dev symfony/maker-bundle
php bin/console doctrine:database:create
php bin/console make:migration
php bin/console doctrine:migrations:migrate

php bin/console make:entity
hp bin/console make:form


########## гит
git init
git status
git add . - Добавит все папки в гит
git commit -m "com1"
git log

git config --global credential.helper store
git config --unset credential.helper  

git remote add origin <link to rep>
git remote -v
git push origin master -u
git clone <link to rep>



############### rights
sudo chmod 777 <file>
sudo chmod 777 <dir> -R




"pathMappings": {
                "/var/www/html": "${workspaceRoot}"
            }


        
        
####################!!install docker - https://docs.docker.com/engine/install/ubuntu/#install-from-a-package

#SET UP THE REPOSITORY
# 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
    
# 2. Add Docker’s official GPG key:
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below.
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
#INSTALL DOCKER ENGINE
# 1. Update the apt package index, and install the latest version of Docker Engine and containerd, or go to the next step to install a specific version:
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io  

# 2. Verify that Docker Engine is installed correctly by running the hello-world image.
sudo docker run hello-world

sudo adduser ub20 docker - и перегрузится -  чтобы каждый раз не ставить sudo перед командой docker



Установки на реальный Linux
----------------------------
################################ install PHP:
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install php8.0 - сразу и Апач ставит
удаление Апач:  sudo apt-get --purge remove 'apache2*'
                sudo apt autoremove
php -m - проверить установленные модули
php -i  - содержание php.ini

расширения (без них Composer install не срабатывает):
sudo apt install php-{bz2,cgi,curl,intl,dev,fpm,gd,imagick,mbstring,mysql,xml,zip}




################################ install Composer:
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
sudo php composer-setup.php --install-dir=/usr/bin --filename=composer
php -r "unlink('composer-setup.php');"

composer -V - инфо о композере


################################ install GIT:
sudo apt-get install git

################################ install XDebug:
ssudo apt-get install php-xdebug
php -V  - инфо об установленном XDebug


################################ install Symfony CLI:
wget https://get.symfony.com/cli/installer -O - | bash
sudo mv /home/ub20/.symfony/bin/symfony /usr/local/bin/symfony











    
