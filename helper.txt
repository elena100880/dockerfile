
########### постройка образа в папке с Докерфайлом:
docker build . -t php:7.4-apache-xdebug
docker build . -t php:8.0-apache-xdebug



######## запуск проекта в папке проекта:
docker run -d -p 80:80 -v "$PWD":/var/www --name oo  php:7.4-apache-xdebug
docker run -d -p 80:80 -v "$PWD":/var/www --name oo  php:8.0-apache-xdebug
docker exec -it oo /bin/bash





########### подготовка проекта

!!!!! создание проекта:
docker run -d -p  80:80 -v "$PWD":/var/www  -w="/var/www"   php:8.0-apache-xdebug  composer create-project symfony/website-skeleton название папки для проекта
docker run -d -p 80:80 -v "$PWD":/var/www  -w="/var/www"   php:7.4-apache-xdebug  composer create-project symfony/website-skeleton название папки для ПРОЕКТА


!!!! sudo chmod 777 <dir> -R - доступ к проекту

!!!!!! добавление pathMappings в launch.json:
 {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003,
            
            "pathMappings": {
                "/var/www": "${workspaceRoot}"
            }

        },


!! и в composer.json проверить, чтобы был раздел с public-dir: html:
 "extra": {
        "symfony": {
            "allow-contrib": true,   //true, чтобы апач-пак поставить
            "require": "5.2.*"
        },
        "public-dir": "html"
    }

!! установить htaccess:
composer req symfony/apache-pack

!! переименование public в html:
sudo mv public html


!! разные допчасти
composer req symfony/form
composer req symfony/orm-pack  - доктрина
composer req symfony/maker-bundle
composer req symfony/security-bundle






######### удаление образов, контейнеров:
docker rmi -f $(docker images -a -q) - удаление всех образов
docker rm $(docker ps -a -q)

docker rmi $(docker images -f dangling=true -q)
docker image prune -a

docker rmi -f $(docker images --filter dangling=true -q) - - очистка образов кеша слоев -т.е. недействительных образов


########### makers
composer req --dev symfony/maker-bundle
php bin/console doctrine:database:create
php bin/console make:migration
php bin/console doctrine:migrations:migrate

php bin/console make:entity
hp bin/console make:form

php bin/console cache:clear


########## гит
git init
git status
git add . - Добавит все папки в гит
git commit -m "com1"
git log

git config --global credential.helper store
git config --unset credential.helper  

git remote add origin <link to rep>
git remote -v
git branch -M main
git push -u origin main

git clone <link to rep>



############### LINUX
sudo chmod 777 <file>
sudo chmod 777 <dir> -R








        
        
####################!!install docker - https://docs.docker.com/engine/install/ubuntu/#install-from-a-package

#SET UP THE REPOSITORY
# 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
    
# 2. Add Docker’s official GPG key:
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below.
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
#INSTALL DOCKER ENGINE
# 1. Update the apt package index, and install the latest version of Docker Engine and containerd, or go to the next step to install a specific version:
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io  

# 2. Verify that Docker Engine is installed correctly by running the hello-world image.
sudo docker run hello-world

sudo adduser ub20 docker - и перегрузится -  чтобы каждый раз не ставить sudo перед командой docker



Установки на реальный Linux
----------------------------
################################ install PHP:
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install php8.0 - сразу и Апач ставит
удаление Апач:  sudo apt-get --purge remove 'apache2*'
                sudo apt autoremove
php -m - проверить установленные модули
php -i  - содержание php.ini

расширения (без них Composer install не срабатывает):
sudo apt install php-{bz2,cgi,curl,intl,dev,fpm,gd,imagick,mbstring,mysql,xml,zip}
sudo apt-get install php-sqlite3




################################ install Composer:
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
sudo php composer-setup.php --install-dir=/usr/bin --filename=composer
php -r "unlink('composer-setup.php');"

composer -V - инфо о композере


################################ install GIT:
sudo apt-get install git

################################ install XDebug:
ssudo apt-get install php-xdebug
php -V  - инфо об установленном XDebug


################################ install Symfony CLI:
wget https://get.symfony.com/cli/installer -O - | bash
sudo mv /home/ub20/.symfony/bin/symfony /usr/local/bin/symfony







############################## Apache
sudo systemctl start apache2
sudo systemctl stop apache2
sudo systemctl restart apache2

sudo apt-get purge 'apache*'






#################### установка MySQL
sudo apt install mysql-server
sudo mysql_secure_installation - установка паролей

sudo mysql:
SELECT user,authentication_string,plugin,host FROM mysql.user;
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
FLUSH PRIVILEGES;

mysql -u root -p - вход для рута вместо sudo mysql

systemctl status mysql.service - проверка, запущен ли сервер
sudo mysqladmin -p -u root version

sudo systemctl start mysql - запуск сервера МуSQL


#################### установка phpMyAdmin  - ставит Апач тоже
sudo apt-get install phpmyadmin
при установке пропустить создание юзера, т.к. создан рут при установке Mysql

sudo gedit /etc/apache2/apache2.conf - вписать вверху файла Include /etc/phpmyadmin/apache.conf - чтобы не было NOT Found
sudo systemctl restart apache2
sudo apt-get install libapache2-mod-php - чтобы не показывало скрипт

!! будет вылазить ошибка:
"Deprecation Notice in ./libraries/classes/Di/ReflectorItem.php#82
 Method ReflectionParameter::getClass() is deprecated"
This is most likely caused by using PHP 8 and PHPMyAdmin < v5 either upgrade you PHPMyAdmin to 5.0 or higher or downgrade your PHP to 7

!! поэтому обновим версию
wget https://files.phpmyadmin.net/phpMyAdmin/5.1.1/phpMyAdmin-5.1.1-all-languages.zip
unzip phpMyAdmin-*-all-languages.zip

содержимое распакованного файла скопируем в /usr/share/phpmyadmin, - предварительно там все старое удалив
sudo systemctl restart apache2

удаление:
sudo dpkg -P phpmyadmin  
sudo rm -f /etc/apache2/conf.d/phpmyadmin.conf 
sudo apt-get purge phpmyadmin






    
